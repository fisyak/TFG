TDataSet *CreateTable() {
  if (!gROOT->GetClass("St_geant_Maker")) return 0;
  StBFChain *chain = (StBFChain *) StMaker::GetChain();
  St_geant_Maker *geantMk = chain->GetMaker("geant");
#if 1
  gSystem->Load( "libVMC.so");

  gSystem->Load( "StarGeneratorUtil.so" );
  gSystem->Load( "StarGeneratorEvent.so" );
  gSystem->Load( "StarGeneratorBase.so" );
  gSystem->Load( "libMathMore.so"   );  
  //  gSystem->Load( "libStarLight1_383.so");
  gSystem->Load( "StarLight");
  gSystem->Load( "xgeometry.so"     );
#endif
//   gSystem->Load( "StarGeneratorUtil.so" );
//   gSystem->Load( "StarGeneratorEvent.so" );
//   gSystem->Load( "StarGeneratorBase.so" );
  //  gSystem->Load( "libStarLight1_383.so");
//   gSystem->Load( "StarLight");
  
  StarPrimaryMaker *primary = new StarPrimaryMaker();
  {
    primary -> SetFileName( "starlight.starsim.root");
    chain -> AddBefore( "geant", primary );
  }
  //
  // Setup an event generator
  //
  StarLight *starlight = new StarLight("STARlight");
  starlight->SetTitle("StarLight 1.383");

  // Setup collision frame, energy and beam species
  starlight->SetFrame("CMS",510.0);
  starlight->SetBlue("proton");
  starlight->SetYell("proton");  
  primary -> AddGenerator(starlight);
  
  //
  // Initialize primary event generator and all sub makers
  //
  primary -> Init();
  geantMk->Do("gkine -4 0");
  TDataSet *tableSet = new TDataSet("StarLight");
  return (TDataSet *)tableSet;
}
