//#define GlobalTracks_type
//#define DEBUG
#if !defined(__CINT__) || defined(__MAKECINT__)
#include "Riostream.h"
#include <stdio.h>
#include "TSystem.h"
#include "TMath.h"
#include "TH1.h"
#include "TH2.h"
#include "TH3.h"
#include "TProfile.h"
#include "TStyle.h"
#include "TF1.h"
#include "TTree.h"
#include "TChain.h"
#include "TFile.h"
#include "TNtuple.h"
#include "TCanvas.h"
#include "TMinuit.h"
#include "TSpectrum.h"
#include "TString.h"
#include "TLine.h"
#include "TText.h"
#include "TROOT.h"
#include "TList.h"
#include "TPolyMarker.h"
#include "StBichsel/Bichsel.h"
#include "BetheBloch.h"
#include "TDirIter.h"
#include "TTreeIter.h"
#include "TLorentzVector.h"
#else
class TSystem;
class TMath;
class TH1;
class TH2;
class TH3;
class TProfile;
class TStyle;
class TF1;
class TTree;
class TChain;
class TFile;
class TNtuple;
class TCanvas;
class TMinuit;
class TSpectrum;
class TString;
class TLine;
class TText;
class TROOT;
class TList;
class TPolyMarker;
class Bichsel;
class BetheBloch;
class TDirIter;
class TTreeIter;
#endif
const Double_t zcut = 5;
#define __PROB_SCALE__  1000.
#define __SIGMA_SCALE__ 1000.
#define __NOVALUE__     -999
static const Double_t amPi = 0.13956995;
static const Double_t amP  = 0.93827231;
static const Double_t amK  = 0.4936770;
//________________________________________________________________________________
void MuKpi(const Char_t *files="*.MuDst.root", 
	   const Char_t *Out="MuKpi.root") {
  TDirIter Dir(files);
  Char_t *file = 0;
  Char_t *file1 = 0;
  Int_t NFiles = 0;
  TTreeIter iter("MuDst");
  while ((file = (Char_t *) Dir.NextFile())) {iter.AddFile(file); NFiles++; file1 = file;}
  cout << files << "\twith " << NFiles << " files" << endl; 
  if (! file1 ) return;
  TString dir = gSystem->DirName(file1);
  dir.ReplaceAll(".","");
  dir.ReplaceAll("/","");
  dir.ReplaceAll("star","");
  dir.ReplaceAll("direct","");
  dir.ReplaceAll("+","");
  dir.ReplaceAll("data07","");
  dir.ReplaceAll("data","");
  dir.ReplaceAll("reco","");
  dir.ReplaceAll("calib","");
  dir.ReplaceAll("fisyak","");
  dir.ReplaceAll("SvtSsdAlignment","");
  dir.ReplaceAll("Kpi","");
  TString output(Out);
  output.ReplaceAll(".root","");
  output += dir;
  output += ".root";
  cout << "Output for " << output << endl;
  const Int_t    &NoPrimVertex               = iter("PrimaryVertices");
  //  const Float_t *&PrimVertexX                = iter("PrimaryVertices.mPosition.mX1");
  //  const Float_t *&PrimVertexY                = iter("PrimaryVertices.mPosition.mX2");
  const Float_t *&PrimVertexZ                = iter("PrimaryVertices.mPosition.mX3");
  const Float_t *&PrimVerSigX                = iter("PrimaryVertices.mPosError.mX1");
  const Float_t *&PrimVerSigY                = iter("PrimaryVertices.mPosError.mX2");
  const Float_t *&PrimVerSigZ                = iter("PrimaryVertices.mPosError.mX3");
  const Int_t    &NoTracks                   = iter("PrimaryTracks");
  const Int_t   *&PrimaryTracks_mVertexIndex = iter("PrimaryTracks.mVertexIndex");
  const UChar_t *&mNHitsFitInner             = iter("PrimaryTracks.mNHitsFitInner");
  const UChar_t *&mNHitsPossInner            = iter("PrimaryTracks.mNHitsPossInner");
  //  const UChar_t *&mNHitsFit                  = iter("PrimaryTracks.mNHitsFit");
  const Float_t *&pT                         = iter("PrimaryTracks.mPt");
  const Float_t *&pX                         = iter("PrimaryTracks.mP.mX1");
  const Float_t *&pY                         = iter("PrimaryTracks.mP.mX2");
  const Float_t *&pZ                         = iter("PrimaryTracks.mP.mX3");

  const Short_t *&Q                          = iter("PrimaryTracks.mHelix.mQ");
  //  const Int_t   *&NSigmaElectron             = iter("PrimaryTracks.mNSigmaElectron");
  const Int_t   *&NSigmaPion                 = iter("PrimaryTracks.mNSigmaPion");
  const Int_t   *&NSigmaKaon                 = iter("PrimaryTracks.mNSigmaKaon");
  //  const Int_t   *&NSigmaProton               = iter("PrimaryTracks.mNSigmaProton");
  const Float_t *&dEdxTrackLength            = iter("PrimaryTracks.mProbPidTraits.mdEdxTrackLength");
  Float_t ppp;
  //  const Float_t *&Eta                        = iter("PrimaryTracks.mEta");
  const Float_t *&Phi                        = iter("PrimaryTracks.mPhi");

  const   Float_t   *&mDcaD                  = iter("PrimaryTracks.mDcaD");
  const   Float_t   *&mSigmaOfDcaD           = iter("PrimaryTracks.mSigmaOfDcaD");
  const   Float_t   *&mDcaZ                  = iter("PrimaryTracks.mDcaZ");
  const   Float_t   *&mSigmaOfDcaZ           = iter("PrimaryTracks.mSigmaOfDcaZ");
  TFile *fOut = new TFile(output,"recreate");
  TString zCut(Form(" vs no. of Possible ones for primary tracks with primary vertex |Z| < %f cm", zcut));
  TString Name;
  TString Title;
  Name = "NoSvtHits"; Title = "No.of fitted SVT hits"; Title += zCut;
  TH2D *NoSvtHits = new TH2D(Name, Title,10,0,10,10,0,10); 
  Name = "NoSsdHits"; Title = "No.of fitted SSD hits"; Title += zCut;
  TH2D *NoSsdHits = new TH2D(Name, Title,10,0,10,10,0,10); 
  Name = "NoSvtSsdHits"; Title = "No.of fitted Svt and SSD hits"; Title += zCut;
  TH2D *NoSvtSsdHits = new TH2D(Name, Title,10,0,10,10,0,10); 
  TH2D *dcaXYInvpT[5], *dcaXYPhi[5];
  TH2D *dcaXYInvp[5];
  TH2D *dcaZInvp[5];
  TH2D *dcaZInvpT[5], *dcaZPhi[5];
  TH2D *pullXYInvpT[5], *pullXYPhi[5];
  TH2D *pullZInvpT[5], *pullZPhi[5];
  for (Int_t i = 0; i < 5; i++) {
    TString Selection;
    if (i == 0)      Selection = "All";
    else if (i == 4) Selection = "No.Svt+Ssd >= 4";
    else             Selection = Form("No. Svt+Ssd = %i",i);
    Name = Form("dcaXYInvpT%i",i); Title = "dca XY versus 1/pT for "; Title += Selection;
    dcaXYInvpT[i] = new TH2D(Name,Title,100,0,10, 500, -1., 1.);
    Name = Form("dcaXYInvp%i",i); Title = "dca XY versus 1/p for "; Title += Selection;
    dcaXYInvp[i] = new TH2D(Name,Title,100,0,10, 500, -1., 1.);
    Name = Form("dcaXYPhi%i",i); Title = "dca XY versus Phi for pT > 1 GeV/c and "; Title += Selection;
    dcaXYPhi[i] = new TH2D(Name,Title,90,-180,180, 500, -1., 1.);
    Name = Form("dcaZInvpT%i",i); Title = "dca Z versus 1/pT for "; Title += Selection;
    dcaZInvpT[i] = new TH2D(Name,Title,100,0,10, 500, -1., 1.);
    Name = Form("dcaZInvp%i",i); Title = "dca Z versus 1/p for "; Title += Selection;
    dcaZInvp[i] = new TH2D(Name,Title,100,0,10, 500, -1., 1.);
    Name = Form("dcaZPhi%i",i); Title = "dca Z versus Phi for pT > 1 GeV/c and "; Title += Selection;
    dcaZPhi[i] = new TH2D(Name,Title,90,-180,180, 500, -1., 1.);
    Name = Form("pullXYInvpT%i",i); Title = "pull XY versus 1/pT for "; Title += Selection;
    pullXYInvpT[i] = new TH2D(Name,Title,100,0,10, 500, -20., 20.);
    Name = Form("pullXYPhi%i",i); Title = "pull XY versus Phi for pT > 1 GeV/c and "; Title += Selection;
    pullXYPhi[i] = new TH2D(Name,Title,90,-180,180, 500, -20., 20.);
    Name = Form("pullZInvpT%i",i); Title = "pull Z versus 1/pT for "; Title += Selection;
    pullZInvpT[i] = new TH2D(Name,Title,100,0,10, 500, -20., 20.);
    Name = Form("pullZPhi%i",i); Title = "pull Z versus Phi for pT > 1 GeV/c and "; Title += Selection;
    pullZPhi[i] = new TH2D(Name,Title,90,-180,180, 500, -20., 20.);
  }
  Int_t nBinsDCA = 400;
  Double_t maxDCA   =  20;
  TH2D *NvsDCAxy = new TH2D("NvsDCAxy","No. of tracks with 2 or more precise hits  per event with s.t.d for dcaXY  more than X",
			    100,0,100,nBinsDCA,0,maxDCA);
  TH2D *NvsDCAz  = new TH2D("NvsDCAz" ,"No. of tracks with 2 or more precise hits  per event with s.t.d for dcaZ  more than X",
			    100,0,100,nBinsDCA,0,maxDCA);
  TH2D *NvsDCA   = new TH2D("NvsDCA"  ,"No. of tracks with 2 or more precise hits  per event with s.t.d for total dca  more than X",
			    100,0,100,nBinsDCA,0,maxDCA);
  TH1D *DCAxy = new TH1D("DCAxy","No. of tracks with 2 or more precise hits  per event with s.t.d for dcaXY  more than X",nBinsDCA,0,maxDCA);
  TH1D *DCAz  = new TH1D("DCAz","No. of tracks with 2 or more precise hits  per event with s.t.d for dcaz  more than X",nBinsDCA,0,maxDCA);
  TH1D *DCA   = new TH1D("DCA","No. of tracks with 2 or more precise hits  per event with s.t.d for dca  more than X",nBinsDCA,0,maxDCA);
  struct Plot_t {
    Char_t *Name;
    Char_t *Title;
  };
  const Int_t Nsys = 2;
  const Plot_t SysNames[Nsys] = {
    {"KPpiN","K+pi-"},
    {"KNpiP","K-pi+"}
  };
  const Int_t Ntyp= 2;
  const Plot_t SysTypes[Ntyp] = {
    {"lXY","|XY decay length|"},
    {"Eff","Effective mass"}
  };
  // Separated cuts
  const Int_t Nl = 2;
  const Plot_t LName[Nl] = {
    {"lXYp","lXY > 0"},
    {"lXYn","lXY < 0"},
  };
  const Int_t Nm = 2;
  const Plot_t TName[Nm] = {
    {"GJP","cos(Theta_{GJ}) > 0"},
    {"GJN","cos(Theta_{GJ}) < 0"},
  };
  // commulicative cuts
  const Int_t Ncut = 10;
  const Plot_t CutNames[Ncut] = {
    {"","No cuts"},
    {"S","no.of SSD+SVT hit for both tracks > 1"},
    {"Sdca","dca/sigma_dca > 3 for both tracks"},
    {"dEdx","n_{Sigma} < 2"},
    {"t2","more than 2 tracks with dca s.t.d. > 2"},
    {"t3","more than 2 tracks with dca s.t.d. > 3"},
    {"t4","more than 2 tracks with dca s.t.d. > 4"},
    {"t5","more than 2 tracks with dca s.t.d. > 5"},
    {"t6","more than 2 tracks with dca s.t.d. > 6"},
    {"t7","more than 2 tracks with dca s.t.d. > 7"}
  };
  TH1D *hists[Nsys][Ntyp][Nl][Nm][Ncut];
  memset (hists, 0, Nsys*Ntyp*Nl*Nm*Ncut*sizeof(TH1D *));
  for (Int_t s = 0; s < Nsys; s++) {
    for (Int_t t = 0; t < Ntyp; t++) {
      Int_t  nx = 200;
      Double_t xmin = 0, xmax = 8;
      if (t != 0) {
	nx   = 1000;
	xmin = amK + amPi;
	xmax = xmin + 2;
      }
      for (Int_t l = 0; l < Nl; l++) {
	for (Int_t m = 0; m < Nm; m++) {
	  TString Cut, CutN;
	  for (Int_t c = 0; c < Ncut; c++) {
	    Name  = SysNames[s].Name; Title                = SysNames[s].Title;
	    Name += SysTypes[t].Name; Title += " "; Title += SysTypes[t].Title;
	    Name += LName[l].Name; Title += " "; Title += LName[l].Title;
	    Name += TName[m].Name; Title += " "; Title += TName[m].Title;
	    Name += CutNames[c].Name; Title += " "; 
	    if (c == 0 || c == 1) Cut = CutNames[c].Title;
	    else {Cut += " "; Cut += CutNames[c].Title;}
	    if (c < 4) CutN = Cut;
	    else {Cut = CutN; Cut += CutNames[c].Title;}
	    Title += Cut;
	    hists[s][t][l][m][c] = new TH1D(Name,Title,nx,xmin,xmax);
	  }
	}
      }
    }
  }
  //         Now iterations
  Int_t NevProc = 0;
  while (iter.Next()) {
    NevProc++;
    for (Int_t l = 0; l < NoPrimVertex; l++) {
      if (TMath::Abs(PrimVertexZ[l]) > zcut ) continue;
      DCAxy->Reset();
      DCAz->Reset();
      DCA->Reset();
      //      if (TMath::Abs(PrimVertexZ[l]) <= 25. ) continue;
      Int_t NtrkDcaStd[6];
      memset(NtrkDcaStd, 0, 6*sizeof(Int_t));
      for (Int_t k = 0; k<NoTracks; k++) {
	if (PrimaryTracks_mVertexIndex[k] != l) continue;
	//	if (mNHitsFit[k] < 25) continue;
	//	if (pT[k] < 0.1) continue;
	//	if ( (pZ[k]/pT[k])>= 1. ) continue;
	Int_t NoFSvtHits =  (mNHitsFitInner[k] & 0x7);
	Int_t NoFSsdHits = ((mNHitsFitInner[k] & 0x18) >> 3);
	Int_t NoFSvtSsdHits = NoFSvtHits + NoFSsdHits;
	Int_t NoPSvtHits =  (mNHitsPossInner[k] & 0x7);
	Int_t NoPSsdHits = ((mNHitsPossInner[k] & 0x18) >> 3);
	Int_t NoPSvtSsdHits = NoPSvtHits + NoPSsdHits;
	NoSvtHits->Fill(NoPSvtHits,NoFSvtHits);
	NoSsdHits->Fill(NoPSsdHits,NoFSsdHits);
	NoSvtSsdHits->Fill(NoPSvtSsdHits,NoFSvtSsdHits);
	Double_t phi = 180*Phi[k]/TMath::Pi();
	ppp = sqrt(pZ[k]*pZ[k]+pZ[k]*pZ[k]);
	Int_t N = 0;
	N = NoFSvtSsdHits;
#if 0
	cout << "Primary l = " << l 
	     << " x " << PrimVertexX[l] << " +/- " << PrimVerSigX[l]
	     << " y " << PrimVertexY[l] << " +/- " << PrimVerSigY[l]
	     << " z " << PrimVertexZ[l] << " +/- " << PrimVerSigZ[l] << endl;
#endif
	Double_t sigmaXY = TMath::Sqrt(mSigmaOfDcaD[k]*mSigmaOfDcaD[k] + 
				       PrimVerSigX[l]*PrimVerSigX[l] +  
				       PrimVerSigY[l]*PrimVerSigY[l]);
	Double_t sigmaZ = TMath::Sqrt(mSigmaOfDcaZ[k]*mSigmaOfDcaZ[k] + PrimVerSigZ[l]*PrimVerSigZ[l]);
#if 0
	cout << "Sigma DCA xy " << mSigmaOfDcaD[k] << " => " << sigmaXY << endl;
	cout << "Sigma DCA z  " << mSigmaOfDcaZ[k] << " => " << sigmaZ << endl;
#endif
	Double_t dcaXY = mDcaD[k];
	Double_t dcaZ  = mDcaZ[k];
	Double_t pullXY = -999;
	Double_t pullZ  = -999;
	Double_t pull   = -999;
	if (sigmaXY > 0) pullXY = dcaXY/sigmaXY;
	if (sigmaZ  > 0) pullZ  = dcaZ /sigmaZ;
	if (pullXY > -999 && pullZ > -999) pull = TMath::Sqrt(pullXY*pullXY + pullZ*pullZ);
	if (N == 0)	  {
	  dcaXYInvpT[N]->Fill(1./pT[k],dcaXY);
	  dcaXYInvp[N]->Fill(1./ppp,dcaXY);
	  if (pullXY > -999) pullXYInvpT[N]->Fill(1./pT[k],pullXY);
	  dcaZInvpT[N]->Fill(1./pT[k],pullZ);
	  dcaZInvp[N]->Fill(1./ppp,pullZ);
	  if (pullZ  > -999) pullZInvpT[N]->Fill(1./pT[k],pullZ);
	  if (pT[k] > 1.) {
	    dcaXYPhi[N]->Fill(phi,dcaXY);
	    if (pullXY > -999) pullXYPhi[N]->Fill(phi,pullXY);
	    dcaZPhi[N]->Fill(phi,pullZ);
	    if (pullZ  > -999) pullZPhi[N]->Fill(phi,pullZ);
	    }
	}
	if (N > 4) N = 4;
	if (N > 0) {
	  dcaXYInvpT[N]->Fill(1./pT[k],dcaXY);
	  dcaXYInvp[N]->Fill(1./ppp,dcaXY);
	  if (pullXY > -999) pullXYInvpT[N]->Fill(1./pT[k],pullXY);
	  dcaZInvpT[N]->Fill(1./pT[k],pullZ);
	  dcaZInvp[N]->Fill(1./ppp,pullZ);
	  if (pullZ  > -999) pullZInvpT[N]->Fill(1./pT[k],pullZ);
	  if (pT[k] > 1.) {
	    dcaXYPhi[N]->Fill(phi,dcaXY);
	    if (pullXY > -999) pullXYPhi[N]->Fill(phi,pullXY);
	    dcaZPhi[N]->Fill(phi,pullZ);
	    if (pullZ  > -999) pullZPhi[N]->Fill(phi,pullZ);
	  }
	}
	if (N >= 2) {
	  if (pullXY  > - 999) DCAxy->Fill(TMath::Abs(pullXY));
	  if (pullZ   > - 999) DCAz->Fill(TMath::Abs(pullZ));
	  if (pull    > - 999) DCA->Fill(pull);
	}
	if (DCA->GetEntries() > 0) {
	  Double_t nXY = 0;
	  Double_t nZ  = 0;
	  Double_t n   = 0;
	  for (Int_t i = nBinsDCA; i > 0; i--) {
	    Double_t x =  DCA->GetBinCenter(i);
	    nXY += DCAxy->GetBinContent(i);
	    nZ  += DCAz->GetBinContent(i);
	    n += DCA->GetBinContent(i);
	    if (nXY > 0) {
	      NvsDCAxy->Fill(nXY,x);
	    }
	    if (nZ  > 0) {
	      NvsDCAz->Fill(nZ,x);
	    }
	    if (n   > 0) {
	      NvsDCA->Fill(n,x);
	      if (x > 2) NtrkDcaStd[0]++;
	      if (x > 3) NtrkDcaStd[1]++;
	      if (x > 4) NtrkDcaStd[2]++;
	      if (x > 5) NtrkDcaStd[3]++;
	      if (x > 6) NtrkDcaStd[4]++;
	      if (x > 7) NtrkDcaStd[5]++;
	    }
	  }
	}
      }
      // pairs
      for (Int_t k = 0; k<NoTracks; k++) {
	if (PrimaryTracks_mVertexIndex[k] != l) continue;
	Double_t dcaXY = mDcaD[k];
	Double_t dcaZ  = mDcaZ[k];
	Double_t pullXY = -999;
	Double_t pullZ  = -999;
	Double_t pull   = -999;
	Double_t sigmaXY = TMath::Sqrt(mSigmaOfDcaD[k]*mSigmaOfDcaD[k] + 
				       PrimVerSigX[l]*PrimVerSigX[l] +  
				       PrimVerSigY[l]*PrimVerSigY[l]);
	Double_t sigmaZ = TMath::Sqrt(mSigmaOfDcaZ[k]*mSigmaOfDcaZ[k] + PrimVerSigZ[l]*PrimVerSigZ[l]);
	if (sigmaXY > 0) pullXY = dcaXY/sigmaXY;
	if (sigmaZ  > 0) pullZ  = dcaZ /sigmaZ;
	if (pullXY > -999 && pullZ > -999) pull = TMath::Sqrt(pullXY*pullXY + pullZ*pullZ);
	Double_t pullK = pull;
	TVector3 trK(pX[k],pY[k],pZ[k]);
	Double_t pmom2 = trK.Mag2();
	Double_t energy = TMath::Sqrt(amK*amK + pmom2);
	TLorentzVector K(trK,energy);
	TVector2  Kxy(K.X(),K.Y());
	Double_t devK = NSigmaKaon[k]/__SIGMA_SCALE__;
	Int_t  s = 0;
	if  (Q[k] < 0) s = 1;
	Int_t NoFSvtSsdHitsK = (mNHitsFitInner[k] & 0x7) + ((mNHitsFitInner[k] & 0x18) >> 3); 
	for (Int_t i = 0; i < NoTracks; i++) {
	  if (PrimaryTracks_mVertexIndex[i] != l) continue;
	  if (k    ==   i ) continue;
	  if (Q[k] == Q[i]) continue;
	  if (mDcaD[k]*mDcaD[i] > 0 ) continue;
	  sigmaXY = TMath::Sqrt(mSigmaOfDcaD[i]*mSigmaOfDcaD[i] + 
				PrimVerSigX[l]*PrimVerSigX[l] +  
				PrimVerSigY[l]*PrimVerSigY[l]);
	  sigmaZ = TMath::Sqrt(mSigmaOfDcaZ[i]*mSigmaOfDcaZ[i] + PrimVerSigZ[l]*PrimVerSigZ[l]);
	  dcaXY = mDcaD[i];
	  dcaZ  = mDcaZ[i];
	  if (sigmaXY > 0) pullXY = dcaXY/sigmaXY;
	  if (sigmaZ  > 0) pullZ  = dcaZ /sigmaZ;
	  if (pullXY > -999 && pullZ > -999) pull = TMath::Sqrt(pullXY*pullXY + pullZ*pullZ);
	  Double_t pullpi = pull;
	  Int_t NoFSvtSsdHitspi = (mNHitsFitInner[i] & 0x7) + ((mNHitsFitInner[i] & 0x18) >> 3); 
	  TVector3 trI(pX[i],pY[i],pZ[i]);
	  pmom2 = trI.Mag2();
	  energy = TMath::Sqrt(amPi*amPi + pmom2);
	  TLorentzVector pi(trI,energy);
	  TLorentzVector Kpi(pi);
	  Kpi += K;
	  TVector3 bF = Kpi.BoostVector();
	  TVector3 b(-bF.X(),-bF.Y(),-bF.Z());
	  TLorentzVector Kl(K);
	  Kl.Boost(b);
	  Double_t Theta_GJ_K = Kl.CosTheta(); 
	  Double_t M = Kpi.M();// cout << "M\t" << M;
	  Double_t devpi = NSigmaPion[i]/__SIGMA_SCALE__;
	  //	  TVector3 K3 = K.Vect().Cross(pi.Vect());
	  Double_t delPhiK  = Kpi.DeltaPhi(K);
	  Double_t delPhipi = Kpi.DeltaPhi(pi);
	  Double_t lXYK = 0;   if (TMath::Abs(delPhiK)  >  1.e-7)  lXYK  =  mDcaD[k]/TMath::Sin(delPhiK);
	  Double_t lXYpi = 0;  if (TMath::Abs(delPhipi) >  1.e-7)  lXYpi =  mDcaD[k]/TMath::Sin(delPhipi);
	  Double_t lXY = 0;
	  if (TMath::Abs(lXYK) > TMath::Abs(lXYpi)) lXY = lXYK;
	  else                                      lXY = lXYpi;
	  Double_t var[2] = {TMath::Abs(lXY), M};
	  for (Int_t l = 0; l < Nl; l++) {
	    if (l == 0 && lXY < 0 || l == 1 && lXY > 0) continue;
	    for (Int_t m = 0; m < Nm; m++) {
	      if (m == 0 && Theta_GJ_K < 0 || m == 1 && Theta_GJ_K > 0) continue;
	      for (Int_t  c = 0; c < Ncut; c++) {
		//"","No cuts"},
		if (c == 1 && ! (NoFSvtSsdHitsK > 1 && NoFSvtSsdHitspi > 1)) break; //"S","no.of SSD+SVT hit for both tracks > 1"},
		if (c == 2 && ! (TMath::Abs(pullK) > 3 && TMath::Abs(pullpi) > 3)) break;//"Sdca","dca/sigma_dca > 3 for both tracks"},
		if (c == 3 && 
		    ! (dEdxTrackLength[k] > 40 && dEdxTrackLength[i] > 40 && 
		       TMath::Abs(devK) > 2 && TMath::Abs(devpi) > 2)) break;//"dEdx","n_{Sigma} < 2"}
		if (c > 3 && NtrkDcaStd[c-4] <= 2) break;
		for (Int_t t = 0; t < Ntyp; t++) {
		  hists[s][t][l][m][c]->Fill(var[t]);
		}
	      }
	    }
	  }
	}
      }
    }
    if (NevProc%10000 == 1) cout << NevProc << "\tevents processed so far" << endl;
  }
  fOut->Write();
  delete fOut;
}
  
