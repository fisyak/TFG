//________________________________________________________________________________
void TMVAClassification( TString myMethodList) {
  TTree *signal     = (TTree*)gDirectory->Get("VertexG");
  if (! signal) { cout << "No signal TTree" << endl; return;}
  TTree *background = (TTree*)gDirectory->Get("VertexB");
  if (! background) { cout << "No background TTree" << endl; return;}
  Int_t SampleSize    = (Int_t) signal->GetEntries();
  Int_t nTrain_Signal = SampleSize/2;
  Int_t nTest_Signal  = SampleSize/2;
  Int_t BackgroundSize = (Int_t) background->GetEntries();
  Int_t nTrain_Background = BackgroundSize/2;
  Int_t nTest_Background = BackgroundSize/2;
  //---------------------------------------------------------------
  // This loads the library
  TMVA::Tools::Instance();
  
  // Default MVA methods to be trained + tested
  map<string,int> Use;
  
  // --- Cut optimisation
  Use["Cuts"]            = 1;
  Use["CutsD"]           = 1;
  Use["CutsPCA"]         = 0;
  Use["CutsGA"]          = 0;
  Use["CutsSA"]          = 0;
  // 
  // --- 1-dimensional likelihood ("naive Bayes estimator")
  Use["Likelihood"]      = 1;
  Use["LikelihoodD"]     = 0; // the "D" extension indicates decorrelated input variables (see option strings)
  Use["LikelihoodPCA"]   = 1; // the "PCA" extension indicates PCA-transformed input variables (see option strings)
  Use["LikelihoodKDE"]   = 0;
  Use["LikelihoodMIX"]   = 0;
  //
  // --- Mutidimensional likelihood and Nearest-Neighbour methods
  Use["PDERS"]           = 1;
  Use["PDERSD"]          = 0;
  Use["PDERSPCA"]        = 0;
  Use["PDEFoam"]         = 1;
  Use["PDEFoamBoost"]    = 0; // uses generalised MVA method boosting
  Use["KNN"]             = 1; // k-nearest neighbour method
  //
  // --- Linear Discriminant Analysis
  Use["LD"]              = 1; // Linear Discriminant identical to Fisher
  Use["Fisher"]          = 0;
  Use["FisherG"]         = 0;
  Use["BoostedFisher"]   = 0; // uses generalised MVA method boosting
  Use["HMatrix"]         = 0;
  //
  // --- Function Discriminant analysis
  Use["FDA_GA"]          = 1; // minimisation of user-defined function using Genetics Algorithm
  Use["FDA_SA"]          = 0;
  Use["FDA_MC"]          = 0;
  Use["FDA_MT"]          = 0;
  Use["FDA_GAMT"]        = 0;
  Use["FDA_MCMT"]        = 0;
  //
  // --- Neural Networks (all are feed-forward Multilayer Perceptrons)
  Use["MLP"]             = 0; // Recommended ANN
  Use["MLPBFGS"]         = 0; // Recommended ANN with optional training method
  Use["MLPBNN"]          = 1; // Recommended ANN with BFGS training method and bayesian regulator
  Use["CFMlpANN"]        = 0; // Depreciated ANN from ALEPH
  Use["TMlpANN"]         = 0; // ROOT's own ANN
  //
  // --- Support Vector Machine 
  Use["SVM"]             = 1;
  // 
  // --- Boosted Decision Trees
  Use["BDT"]             = 1; // uses Adaptive Boost
  Use["BDTG"]            = 0; // uses Gradient Boost
  Use["BDTB"]            = 0; // uses Bagging
  Use["BDTD"]            = 0; // decorrelation + Adaptive Boost
  Use["BDTF"]            = 0; // allow usage of fisher discriminant for node splitting 
  Use["myBDTD"]          = 1; // mine
  // 
  // --- Friedman's RuleFit method, ie, an optimised series of cuts ("rules")
  Use["RuleFit"]         = 1;
  // ---------------------------------------------------------------
  
  cout << endl;
  cout << "==> Start TMVAClassification" << endl;
  
  // Select methods (don't look at this code - not of interest)
  if (myMethodList != "") {
    for (map<string,int>::iterator it = Use.begin(); it != Use.end(); it++) it->second = 0;
    
    vector<TString> mlist = TMVA::gTools().SplitString( myMethodList, ',' );
    for (UInt_t i=0; i<mlist.size(); i++) {
      string regMethod(mlist[i]);
      
      if (Use.find(regMethod) == Use.end()) {
	cout << "Method \"" << regMethod << "\" not known in TMVA under this name. Choose among the following:" << endl;
	for (map<string,int>::iterator it = Use.begin(); it != Use.end(); it++) cout << it->first << " ";
	cout << endl;
	return;
      }
      Use[regMethod] = 1;
    }
  }
  
  // --------------------------------------------------------------------------------------------------
  
  // --- Here the preparation phase begins
  
  // Create a ROOT output file where TMVA will store ntuples, histograms, etc.
  TString outfileName( "TMVA.root" );
  TFile* outputFile = TFile::Open( outfileName, "RECREATE" );
  
  // Create the factory object. Later you can choose the methods
  // whose performance you'd like to investigate. The factory is 
  // the only TMVA object you have to interact with
  //
  // The first argument is the base of the name of all the
  // weightfiles in the directory weight/
  //
  // The second argument is the output file for the training results
  // All TMVA output can be suppressed by removing the "!" (not) in
  // front of the "Silent" argument in the option string
  TMVA::Factory *factory = new TMVA::Factory( "TMVAClassification", outputFile,
					      "!V:!Silent:Color:DrawProgressBar:Transformations=I;D;P;G,D:AnalysisType=Classification" );
  
  // If you wish to modify default settings
  // (please check "src/Config.h" to see all available global options)
  //    (TMVA::gConfig().GetVariablePlotting()).fTimesRMS = 8.0;
  //    (TMVA::gConfig().GetIONames()).fWeightFileDir = "myWeightDirectory";
  
  // load the signal and background event samples from ROOT trees
  
  cout <<" starts ... " << endl;
  // global event weights per tree (see below for setting event-wise weights)
  //   Float_t w;
  Double_t signalWeight     = 1.0;
  Double_t backgroundWeight = 1.0;
  
  cout <<" signalWeight = " << signalWeight <<" backWeight = " << backgroundWeight << endl;
  factory->AddSignalTree( signal,    signalWeight     );
  factory->AddBackgroundTree( background, backgroundWeight );
  
  TString separator(":");
  TString Vnames(vnames);
  TObjArray *array = Vnames.Tokenize(separator);
  
  vector<string> inputVars;
  TIter next(array);
  TObjString *objs;
  
  while ((objs = (TObjString *) next())) {
    //    cout << objs->GetString() << endl;
    if (! AcceptVar(objs->GetString())) continue;
#if 0
    signal->Draw(Form("%s >> temp",objs->GetString().Data()),"","goff");
    TH1 *temp = (TH1 *) gDirectory->Get("temp");
    if (! temp) continue;
    if (temp->GetRMS() < 1.e-7) {
      delete temp;
      continue;
    }
    delete temp;
#endif
    factory->AddVariable(objs->GetString(), 'F');
  }
  // This would set individual event weights (the variables defined in the 
  // expression need to exist in the original TTree)
  //    for signal    : factory->SetSignalWeightExpression("weight1*weight2");
  //    for background: factory->SetBackgroundWeightExpression("weight1*weight2");
  // commented JB : 04/26 ??
  //factory->dSetBackgroundWeightExpression("weight");
  
  // Apply additional cuts on the signal and background samples (can be different)
  TCut mycuts = "";
  TCut mycutb = "";
  
  // Tell the factory how to use the training and testing events
  //
  // If no numbers of events are given, half of the events in the tree are used 
  // for training, and the other half for testing:
  //    factory->PrepareTrainingAndTestTree( mycut, "SplitMode=random:!V" );
  // To also specify the number of testing events, use:
  //factory->PrepareTrainingAndTestTree( mycuts,mycutb,"NSigTrain=9000:NBkgTrain=50000:NSigTest=9000:NBkgTest=50000:SplitMode=Random:!V" );
  //   factory->PrepareTrainingAndTestTree( mycuts, mycutb,"nTrain_Signal=3000:nTrain_Background=20000:nTest_Signal=3000:nTest_Background=20000:SplitMode=Random:!V"); // for KFVertex
  TString SampleSet(Form("nTrain_Signal=%d:nTrain_Background=%d:nTest_Signal=%d:nTest_Background=%d:SplitMode=Random:!V",
			 nTrain_Signal,nTrain_Background,nTest_Signal,nTest_Background));
  factory->PrepareTrainingAndTestTree( mycuts, mycutb,SampleSet.Data());
  
  // ---- Book MVA methods
  //
  // Please lookup the various method configuration options in the corresponding cxx files, eg:
  // src/MethoCuts.cxx, etc, or here: http://tmva.sourceforge.net/optionRef.html
  // it is possible to preset ranges in the option string in which the cut optimisation should be done:
  // "...:CutRangeMin[2]=-1:CutRangeMax[2]=1"...", where [2] is the third input variable
  if (Use["Cuts"]) { // Cut optimisation
    SampleSet = Form("!H:!V:FitMethod=MC:EffSel:SampleSize=%d:VarProp=FSmart",SampleSize);
    factory->BookMethod( TMVA::Types::kCuts, "Cuts",SampleSet.Data());
  }
  if (Use["CutsD"]) {
    SampleSet = Form("!H:!V:FitMethod=MC:EffSel:SampleSize=%d:VarProp=FSmart:VarTransform=Decorrelate",SampleSize);
    factory->BookMethod( TMVA::Types::kCuts, "CutsD",SampleSet.Data());
  }
  if (Use["CutsPCA"]) {
    SampleSet = Form("!H:!V:FitMethod=MC:EffSel:SampleSize=%d:VarProp=FSmart:VarTransform=PCA",SampleSize);
    factory->BookMethod( TMVA::Types::kCuts, "CutsPCA",SampleSet.Data());
  }
  if (Use["CutsGA"]) {
    factory->BookMethod( TMVA::Types::kCuts, "CutsGA",
			 "H:!V:FitMethod=GA:CutRangeMin[0]=-10:CutRangeMax[0]=10:VarProp[1]=FMax:EffSel:Steps=30:"
			 "Cycles=3:PopSize=400:SC_steps=10:SC_rate=5:SC_factor=0.95" );
  }
  if (Use["CutsSA"]) {
    factory->BookMethod( TMVA::Types::kCuts, "CutsSA",
			 "!H:!V:FitMethod=SA:EffSel:MaxCalls=150000:KernelTemp=IncAdaptive:InitialTemp=1e+6:"
			 "MinTemp=1e-6:Eps=1e-10:UseDefaultScale" );
  }
  if (Use["Likelihood"]) { // Likelihood ("naive Bayes estimator")
    factory->BookMethod( TMVA::Types::kLikelihood, "Likelihood",
			 "H:!V:TransformOutput:PDFInterpol=Spline2:NSmoothSig[0]=20:NSmoothBkg[0]=20:NSmoothBkg[1]=10:"
			 "NSmooth=1:NAvEvtPerBin=50" );
  }
  if (Use["LikelihoodD"]) { // Decorrelated likelihood
    factory->BookMethod( TMVA::Types::kLikelihood, "LikelihoodD",
			 "!H:!V:TransformOutput:PDFInterpol=Spline2:NSmoothSig[0]=20:NSmoothBkg[0]=20:NSmooth=5:"
			 "NAvEvtPerBin=50:VarTransform=Decorrelate" );
  }  
  if (Use["LikelihoodPCA"]) { // PCA-transformed likelihood
    factory->BookMethod( TMVA::Types::kLikelihood, "LikelihoodPCA",
			 "!H:!V:!TransformOutput:PDFInterpol=Spline2:NSmoothSig[0]=20:NSmoothBkg[0]=20:NSmooth=5:"
			 "NAvEvtPerBin=50:VarTransform=PCA" ); 
  }
  if (Use["LikelihoodKDE"]) { // Use a kernel density estimator to approximate the PDFs
    factory->BookMethod( TMVA::Types::kLikelihood, "LikelihoodKDE",
			 "!H:!V:!TransformOutput:PDFInterpol=KDE:KDEtype=Gauss:KDEiter=Adaptive:KDEFineFactor=0.3:"
			 "KDEborder=None:NAvEvtPerBin=50" ); 
  }
  if (Use["LikelihoodMIX"]) {// Use a variable-dependent mix of splines and kernel density estimator
    factory->BookMethod( TMVA::Types::kLikelihood, "LikelihoodMIX",
			 "!H:!V:!TransformOutput:PDFInterpolSig[0]=KDE:PDFInterpolBkg[0]=KDE:PDFInterpolSig[1]=KDE:"
			 "PDFInterpolBkg[1]=KDE:PDFInterpolSig[2]=Spline2:PDFInterpolBkg[2]=Spline2:"
			 "PDFInterpolSig[3]=Spline2:PDFInterpolBkg[3]=Spline2:KDEtype=Gauss:KDEiter=Nonadaptive:"
			 "KDEborder=None:NAvEvtPerBin=50" ); 
  }
  // Test the multi-dimensional probability density estimator
  // here are the options strings for the MinMax and RMS methods, respectively:
  //      "!H:!V:VolumeRangeMode=MinMax:DeltaFrac=0.2:KernelEstimator=Gauss:GaussSigma=0.3" );
  //      "!H:!V:VolumeRangeMode=RMS:DeltaFrac=3:KernelEstimator=Gauss:GaussSigma=0.3" );
  if (Use["PDERS"]) {
    factory->BookMethod( TMVA::Types::kPDERS, "PDERS",
			 "!H:!V:NormTree=T:VolumeRangeMode=Adaptive:KernelEstimator=Gauss:GaussSigma=0.3:MinNodeSize=0.05:NEventsMax=600" );
  }
  if (Use["PDERSD"]) {
    factory->BookMethod( TMVA::Types::kPDERS, "PDERSD",
			 "!H:!V:VolumeRangeMode=Adaptive:KernelEstimator=Gauss:GaussSigma=0.3:MinNodeSize=0.05:NEventsMax=600"
			 ":VarTransform=Decorrelate" );
  }
  if (Use["PDERSPCA"]) {
    factory->BookMethod( TMVA::Types::kPDERS, "PDERSPCA",
			 "!H:!V:VolumeRangeMode=Adaptive:KernelEstimator=Gauss:GaussSigma=0.3:MinNodeSize=0.05:NEventsMax=600"
			 ":VarTransform=PCA" );
  }
  if (Use["PDEFoam"]) {// Multi-dimensional likelihood estimator using self-adapting phase-space binning
    factory->BookMethod( TMVA::Types::kPDEFoam, "PDEFoam",
			 "!H:!V:SigBgSeparate=F:TailCut=0.001:VolFrac=0.0666:nActiveCells=500:nSampl=2000:nBin=5:"
			 "Nmin=100:Kernel=None:Compress=T" );
  }
  if (Use["PDEFoamBoost"]) {
    factory->BookMethod( TMVA::Types::kPDEFoam, "PDEFoamBoost",
			 "!H:!V:Boost_Num=30:Boost_Transform=linear:SigBgSeparate=F:MaxDepth=4:UseYesNoCell=T:"
			 "DTLogic=MisClassificationError:FillFoamWithOrigWeights=F:TailCut=0:nActiveCells=500:"
			 "nBin=20:Nmin=400:Kernel=None:Compress=T" );
  }
  if (Use["KNN"]) {// K-Nearest Neighbour classifier (KNN)
    factory->BookMethod( TMVA::Types::kKNN, "KNN",
			 "H:nkNN=20:ScaleFrac=0.8:SigmaFact=1.0:Kernel=Gaus:UseKernel=F:UseWeight=T:!Trim" );
  }  
  if (Use["HMatrix"]) {// H-Matrix (chi2-squared) method
    factory->BookMethod( TMVA::Types::kHMatrix, "HMatrix", "!H:!V:VarTransform=None" );
  }  
  if (Use["LD"]) {// Linear discriminant (same as Fisher discriminant)
    factory->BookMethod( TMVA::Types::kLD, "LD", "H:!V:VarTransform=None:CreateMVAPdfs:PDFInterpolMVAPdf=Spline2:"
			 "NbinsMVAPdf=50:NsmoothMVAPdf=10" );
  }
  if (Use["Fisher"]) { // Fisher discriminant (same as LD)
    factory->BookMethod( TMVA::Types::kFisher, "Fisher", "H:!V:Fisher:VarTransform=None:CreateMVAPdfs:"
			 "PDFInterpolMVAPdf=Spline2:NbinsMVAPdf=50:NsmoothMVAPdf=10" );
  }
  if (Use["FisherG"]) {// Fisher with Gauss-transformed input variables
    factory->BookMethod( TMVA::Types::kFisher, "FisherG", "H:!V:VarTransform=Gauss" );
  }  
  if (Use["BoostedFisher"]) { // Composite classifier: ensemble (tree) of boosted Fisher classifiers
    factory->BookMethod( TMVA::Types::kFisher, "BoostedFisher", 
			 "H:!V:Boost_Num=20:Boost_Transform=log:Boost_Type=AdaBoost:Boost_AdaBoostBeta=0.2:!Boost_DetailedMonitoring" );
  }
  if (Use["FDA_MC"]) {// Function discrimination analysis (FDA) -- test of various fitters - the recommended one is Minuit (or GA or SA)
    
    factory->BookMethod( TMVA::Types::kFDA, "FDA_MC",
			 "H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1);(-10,10);(-10,10);(-10,10);(-10,10):FitMethod=MC:SampleSize=100000:Sigma=0.1" );
  }
  if (Use["FDA_GA"]) {// can also use Simulated Annealing (SA) algorithm (see Cuts_SA options])
    factory->BookMethod( TMVA::Types::kFDA, "FDA_GA",
			 "H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1);(-10,10);(-10,10);(-10,10);(-10,10):"
			 "FitMethod=GA:PopSize=300:Cycles=3:Steps=20:Trim=True:SaveBestGen=1" );
  }
  if (Use["FDA_SA"]) {// can also use Simulated Annealing (SA) algorithm (see Cuts_SA options])
    factory->BookMethod( TMVA::Types::kFDA, "FDA_SA",
			 "H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1);(-10,10);(-10,10);(-10,10);(-10,10):"
			 "FitMethod=SA:MaxCalls=15000:KernelTemp=IncAdaptive:InitialTemp=1e+6:MinTemp=1e-6:Eps=1e-10:UseDefaultScale" );
  }
  if (Use["FDA_MT"]) {
    factory->BookMethod( TMVA::Types::kFDA, "FDA_MT",
			 "H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1);(-10,10);(-10,10);(-10,10);(-10,10):"
			 "FitMethod=MINUIT:ErrorLevel=1:PrintLevel=-1:FitStrategy=2:UseImprove:UseMinos:SetBatch" );
  }
  if (Use["FDA_GAMT"]) {
    factory->BookMethod( TMVA::Types::kFDA, "FDA_GAMT",
			 "H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1);(-10,10);(-10,10);(-10,10);(-10,10):"
			 "FitMethod=GA:Converger=MINUIT:ErrorLevel=1:PrintLevel=-1:FitStrategy=0:!UseImprove:!UseMinos:SetBatch:"
			 "Cycles=1:PopSize=5:Steps=5:Trim" );
  }
  if (Use["FDA_MCMT"]) {
    factory->BookMethod( TMVA::Types::kFDA, "FDA_MCMT",
			 "H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1);(-10,10);(-10,10);(-10,10);(-10,10):"
			 "FitMethod=MC:Converger=MINUIT:ErrorLevel=1:PrintLevel=-1:FitStrategy=0:!UseImprove:!UseMinos:SetBatch:"
			 "SampleSize=20" );
  }
  if (Use["MLP"]) {// TMVA ANN: MLP (recommended ANN) -- all ANNs in TMVA are Multilayer Perceptrons
    factory->BookMethod( TMVA::Types::kMLP, "MLP", "H:!V:NeuronType=tanh:VarTransform=N:NCycles=600:HiddenLayers=N+5:TestRate=5:!UseRegulator" );
  }  
  if (Use["MLPBFGS"]) {
    factory->BookMethod( TMVA::Types::kMLP, "MLPBFGS", "H:!V:NeuronType=tanh:VarTransform=N:NCycles=600:HiddenLayers=N+5:TestRate=5:"
			 "TrainingMethod=BFGS:!UseRegulator" );
  }
  if (Use["MLPBNN"]) { // BFGS training with bayesian regulators
    factory->BookMethod( TMVA::Types::kMLP, "MLPBNN", "H:!V:NeuronType=tanh:VarTransform=N:NCycles=600:HiddenLayers=N+5:TestRate=5:"
			 "TrainingMethod=BFGS:UseRegulator" ); 
  }
  if (Use["CFMlpANN"]) { // CF(Clermont-Ferrand)ANN
    factory->BookMethod( TMVA::Types::kCFMlpANN, "CFMlpANN", "!H:!V:NCycles=2000:HiddenLayers=N+1,N"  ); // n_cycles:#nodes:#nodes:...  
  }
  if (Use["TMlpANN"]) {// Tmlp(Root)ANN  // n_cycles:#nodes:#nodes:...
    factory->BookMethod( TMVA::Types::kTMlpANN, "TMlpANN", "!H:!V:NCycles=200:HiddenLayers=N+1,N:LearningMethod=BFGS:ValidationFraction=0.3"  );
  }
  if (Use["SVM"]) { // Support Vector Machine
    factory->BookMethod( TMVA::Types::kSVM, "SVM", "Gamma=0.25:Tol=0.001:VarTransform=Norm" );
  }
  if (Use["BDTG"]) {// Boosted Decision Trees: Gradient Boost
    factory->BookMethod( TMVA::Types::kBDT, "BDTG",
			 "!H:!V:NTrees=1000:BoostType=Grad:Shrinkage=0.10:UseBaggedGrad:GradBaggingFraction=0.5:nCuts=20:NNodesMax=5" );
  }
  if (Use["BDT"])  { // Adaptive Boost
    factory->BookMethod( TMVA::Types::kBDT, "BDT",
			 "!H:!V:NTrees=850:MinNodeSize=0.05:MaxDepth=3:BoostType=AdaBoost:AdaBoostBeta=0.5:SeparationType=GiniIndex:nCuts=20"
			 ":PruneMethod=NoPruning" );
  }
  if (Use["BDTB"]) {// Bagging
    factory->BookMethod( TMVA::Types::kBDT, "BDTB",
			 "!H:!V:NTrees=400:BoostType=Bagging:SeparationType=GiniIndex:nCuts=20:PruneMethod=NoPruning" );
  }
  if (Use["BDTD"]) {// Decorrelation + Adaptive Boost
    factory->BookMethod( TMVA::Types::kBDT, "BDTD",
			 "!H:!V:NTrees=400:MinNodeSize=0.05:MaxDepth=3:BoostType=AdaBoost:SeparationType=GiniIndex:nCuts=20:PruneMethod=NoPruning"
			 ":VarTransform=Decorrelate" );
}
  if (Use["myBDTD"]) { // Decorrelation + Adaptive Boost
    factory->BookMethod( TMVA::Types::kBDT, "BDTDTEST",
			 "!H:!V:NTrees=1000:MinNodeSize=0.05:MaxDepth=6:BoostType=AdaBoost:SeparationType=GiniIndex:nCuts=20:PruneMethod=NoPruning"
			 ":VarTransform=Decorrelate" );
  }
  if (Use["BDTF"]) { // Allow Using Fisher discriminant in node splitting for (strong) linearly correlated variables
    factory->BookMethod( TMVA::Types::kBDT, "BDTMitFisher",
			 "!H:!V:NTrees=50:MinNodeSize=0.05:UseFisherCuts:MaxDepth=3:BoostType=AdaBoost:AdaBoostBeta=0.5:SeparationType=GiniIndex"
			 ":nCuts=20:PruneMethod=NoPruning" );
  }
  if (Use["RuleFit"]) { // RuleFit -- TMVA implementation of Friedman's method
    factory->BookMethod( TMVA::Types::kRuleFit, "RuleFit",
			 "H:!V:RuleFitModule=RFTMVA:Model=ModRuleLinear:MinImp=0.001:RuleMinDist=0.001:NTrees=20:fEventsMin=0.01:fEventsMax=0.5"
			 ":GDTau=-1.0:GDTauPrec=0.01:GDStep=0.01:GDNSteps=10000:GDErrScale=1.02" );
  }
  // For an example of the category classifier usage, see: TMVAClassificationCategory
  //   TMVA::IMethod* category         = factory->BookMethod( TMVA::Types::kCategory,"Category","" );
  // --------------------------------------------------------------------------------------------------
  // ---- Now you can optimize the setting (configuration) of the MVAs using the set of training events
#if 0
  factory->OptimizeAllMethods("SigEffAt001","Scan");
  factory->OptimizeAllMethods("ROCIntegral","GA");
#endif
  // --------------------------------------------------------------------------------------------------
  // ---- Now you can tell the factory to train, test, and evaluate the MVAs
  // Train MVAs using the set of training events
  factory->TrainAllMethods();
  // ---- Evaluate all MVAs using the set of test events
  factory->TestAllMethods();
  // ----- Evaluate and compare performance of all configured MVAs
  factory->EvaluateAllMethods();
  // --------------------------------------------------------------
  
  // Save the output
  outputFile->Close();
  cout << "==> Wrote root file: " << outputFile->GetName() << endl;
  cout << "==> TMVAClassification is done!" << endl;
  delete factory;
#if 0  
  // Launch the GUI for the root macros
  if (!gROOT->IsBatch()) TMVAGui( outfileName );
#endif
}


