<chapter name="Program Files">

<h2>Program Files</h2>

The code is subdivided into a set of files, mainly by physics 
task. Each file typically contains one main class, but often
with a few related helper classes that are not used elsewhere in 
the program. Normally the files come in pairs.
<ul>
<li>A header file, <code>.h</code> in the <code>include</code> 
subdirectory, where the public interface of the class is declared, 
and inline methods are defined.</li>
<li>A source code file, <code>.cc</code> in the <code>src</code> 
subdirectory, where most of the methods are implemented.</li>
</ul>
During compilation, related dependency files, <code>.d</code>, and 
compiled code, <code>.o</code> are created in the <code>tmp</code>
subdirectory.

<p/>
In part the <code>.xml</code> documentation files in the 
<code>xmldoc</code> subdirectory have matching names, but the match 
is broken by the desire to group topics more by user interaction than 
internal operation. On these pages the function of the different code 
files is summarized. Currently, each <code>.xml</code> file is also 
translated into an <code>.html</code> one in the 
<code>htmldoc</code> subdirectory, to allow easy viewing of the 
contents in a web browser, and an <code>.php</code> one in 
<code>phpdoc</code>, for more sophisticated interactivity
if that subdirectory is installed on a web server.

<p/>
Here is the current list of files, ordered alphabetically, with a brief
description of contents.

<file name="Analysis">
contains routines to analyze events. Currently it can do sphericity, 
thrust, Lund/Jade/Durham jet clustering, and cone-jet finding.
</file>

<file name="Basics">
contains some basic facilities of general use: a random number
generator <code>Rndm</code>, a four-vector class <code>Vec4</code>, and a 
histogram class <code>Hist</code>.  
</file>

<file name="BeamParticle"> 
contains information on all partons extracted from one of the two
beams. Defines modified parton distributions accordingly during the
showering and multiple interactions processing, thereby extending on 
the one-particle-inclusive distributions defined by the previous class.
Finds the internal structure for a beam remnant.
</file>

<file name="BeamRemnants"> 
adds primordial <ei>kT</ei> to the set of hard subsystems,
and combines these subsystems with the two beam remnants to provide 
the overall energy-momentum picture. Also ties together all the 
colour lines into consistent singlets. 
</file>

<file name="BoseEinstein"> 
provides a simple method to impose Bose-Einstein correlations on 
pairs of identical mesons.
</file>

<file name="Event"> 
contains the event record, which basically is a vector of particles.
This file also contains the <code>Particle</code> class, used by 
<code>Event</code>. <code>Pythia</code> uses two <code>Event</code> 
objects, one for the process-level record (<code>process</code>) and 
one for the complete event (<code>event</code>).
</file>

<file name="FragmentationFlavZpT">
contains the classes for describing the fragmentation steps in
flavour and in longitudinal and transverse momentum.
</file>

<file name="FragmentationSystems">
defines some containers of parton systems, for use in 
the fragmentation routines.
</file>

<file name="HadronLevel">
turns the parton-level event above into a set of outgoing particles,
by applying string fragmentation (with special treatment for low-mass
systems) and secondary decays, and optionally Bose-Einstein corrections.
</file>

<file name="HepMCInterface">
contains an interface to convert the PYTHIA 8 event record into the 
HepMC format. The <code>HepMCInterface.cc</code> file is located in
the subdirectory <code>hepmcinterface</code> and is used to build a 
separate <code>libhepmcinterface</code> library. 
</file>

<file name="Info">
is a simple container that gives access to some information on the
nature of the current process, such as Mandelstam variables.
Also contains a small database for errors and warnings encountered 
during program execution.
</file>

<file name="LesHouches">
gives the possibility to feed in parton configurations for the 
subsequent event generation. One base class is defined, with containers
for initialization and event information, that can be read from 
<code>Pythia</code>. Derived classes allow for a few different cases.
</file>

<file name="LHAFortran">
is a header file only, for a class derived from the above LesHouches 
one, to be used for runtime interfacing to Fortran programs, such as
PYTHIA 6. 
</file>

<file name="LHAPDFInterface"> 
is a header file only, with interfaces to the key LHAPDF routines,
as needed for a runtime interface. There is a file
<code>lhapdfdummy/LHAPDFdummy.cc</code> with matching dummy
implementations, however. This file is used to build a separate 
<code>liblhapdfdummy</code> library, to be linked when the LHAPDF 
library is not used, so as to avoid problems with undefined references. 
</file>

<file name="MiniStringFragmentation"> 
performs string fragmentation in cases where the colour singlet
subsystem mass is so small that one or at most two primary hadrons 
should be produced from it.
</file>

<file name="MultipleInteractions"> 
performs multiple parton-parton interactions.
</file>

<file name="ParticleData">
contains a database of all necessary particle data (masses, names, ..)
and decay channels.
</file>

<file name="ParticleDecays">
performs the decays of all normal unstable hadrons and leptons, i.e. 
in mass up to and including <ei>b bbar</ei> systems. It is not 
intended for decays of electroweak resonances, like <ei>Z^0</ei>.  
</file>

<file name="PartonDistributions"> 
contains parton distribution functions for the proton and electron. 
Currently very simple, with only two <ei>p</ei> parametrizations 
and one <ei>e</ei> ditto available, but it is possible to link in 
external sets.
</file>

<file name="PartonLevel">
turns the (hard) process above into a complete set of partons, by 
adding initial- and final-state radiation, multiple parton--parton
interactions, and beam remnants.
</file>

<file name="PhaseSpace">
selects a point in phase space for the hard-process generation,
optimized separately for each process to give improved Monte Carlo 
efficiency.
</file>

<file name="ProcessContainer">
packages the information on a given subprocess, combining the 
phase-space selection and cross-section evaluation machineries
with some statistics information. Also sets up the list of processes
to be studied in a run.  
</file>

<file name="ProcessLevel">
handles the generation of the (hard) process that sets the character 
of the event. This involves either using internally implemented 
processes or linking to Les Houches information. The latter can
be by runtime interfaces or by reading in a file. This step also 
includes resonance decays. 
</file>

<file name="Pythia"> 
is the main class, that administrates the whole event generation 
process by making use of all the others classes. Objects of most
other classes reside (directly or indirectly) inside <code>Pythia</code>, 
so only a <code>Pythia</code> object needs to be explicitly instantiated 
and addressed   by the user.
</file>

<file name="Pythia6Interface">
is a header file only, with interfaces to the key PYTHIA 6 routines,
as needed for a runtime Les Houches interface to this program. 
</file>

<file name="PythiaComplex">
is only a <code>.h</code> file, containing a <code>typedef</code> for 
double precision complex numbers.
</file>

<file name="PythiaStdlib">
is only a <code>.h</code> file, containing most of the <code>Stdlib</code> 
headers used in PYTHIA 8, with <code>using</code> directives. It defines 
<code>M_PI</code> if this is not already done. Also a few simple inline 
methods: <code>pow2(x)</code>, <code>pow3(x)</code>, <code>pow4(x)</code> 
and <code>pow5(x)</code> for small integer powers, and 
<code>sqrtpos(x)</code> where a <code>max(0., x)</code> ensures that one 
does not take the square root of a negative number.
</file>

<file name="ResonanceDecays"> 
decays resonances as part of the hard-process stage, in many cases 
(but not all) including angular correlations between the decay products.
</file>

<file name="ResonanceWidths"> 
encodes some properties of resonances, in particular the dynamic 
calculation of widths.
</file>

<file name="Settings"> 
contains a database of all flags, modes, parameters and words that 
determine the performance of the generator. Initial values are obtained 
from the contents of the <code>.xml</code> files, but these values can 
then be changed by the user.
</file>

<file name="SigmaCompositeness">
contains the cross sections and matrix elements for production of
some particles in compositeness scenarios, specifically excited 
fermions.
</file>

<file name="SigmaEW">
contains the cross sections and matrix elements for electroweak
processes involving photons, <ei>Z^0</ei>'s and <ei>W^+-</ei>'s.
</file>

<file name="SigmaExtraDim">
contains the cross sections and matrix elements for processes in
scenarios involving extra dimensions.
</file>

<file name="SigmaHiggs">
contains the cross sections and matrix elements for Higgs production.
</file>

<file name="SigmaLeftRightSym">
contains the cross sections and matrix elements for particle production
in left-right-symmetry scenarios, specifically righthanded <ei>Z</ei> 
and <ei>W</ei> bosons and doubly-charged Higgs bosons. 
</file>

<file name="SigmaLeptoquark">
contains the cross sections and matrix elements for leptoquark production.
</file>

<file name="SigmaNewGaugeBosons">
contains the cross sections and matrix elements for a <ei>Z'^0</ei>,
a <ei>W^+-</ei> and a horizontal gauge boson <ei>R^0</ei>.
</file>

<file name="SigmaOnia">
contains the cross sections and matrix elements for charmonium and 
bottomonium production.
</file>

<file name="SigmaProcess">
contains the base class and derived classes for the evaluation of
different matrix elements. Also keeps track of allowed incoming
parton configurations and their cross sections, including parton
densities. In order to keep this file from becoming too big, actual 
cross sections are found in several separate files of derived classes:
<code>SigmaQCD</code>, <code>SigmaEW</code>, <code>SigmaOnia</code>, 
<code>SigmaHiggs</code>, <code>SigmaSUSY</code>,  
<code>SigmaNewGaugeBosons</code>, <code>SigmaLeftRightSym</code>,
<code>SigmaLeptoquark</code>, <code>SigmaCompositeness</code> and
<code>SigmaExtraDim</code>.
</file>

<file name="SigmaQCD">
contains the cross sections and matrix elements for soft and hard
QCD processes.
</file>

<file name="SigmaSUSY">
contains the cross sections and matrix elements for Supersymmetric
processes.
</file>

<file name="SigmaTotal"> 
contains parametrizations of total, elastic and diffractive hadronic 
cross sections.
</file>

<file name="SpaceShower"> 
performs spacelike initial-state transverse-momentum-ordered 
shower evolution.
</file>

<file name="StandardModel"> 
contains the running <ei>alpha_strong</ei>, with <ei>Lambda</ei> 
matching at flavour thresholds, the running <ei>alpha_em</ei>,
CKM mixing matrices, and a few other parameters such as
<ei>sin^2(theta_W)</ei>.
</file>

<file name="StringFragmentation"> 
performs string fragmentation of a given set of partons.
</file>

<file name="SusyLesHouches">
contains information on SUSY parameters and particle data as specified
by the SUSY Les Houches Accord.
</file>

<file name="TimeShower"> 
performs timelike final-state transverse-momentum-ordered 
shower evolution.
</file>

<file name="UserHooks"> 
Provides a way for a user to study the event at a few intermediate
stages of evolution, to reject the event as a whole or to modify
its cross-section weight. 
</file>

</chapter>

<!-- Copyright (C) 2008 Torbjorn Sjostrand -->
