/*
 * $Id: StiBTofDetectorBuilder.cxx.new,v 1.1.1.1 2012/04/10 13:31:39 fisyak Exp $
 *
 * $Log: StiBTofDetectorBuilder.cxx.new,v $
 * Revision 1.1.1.1  2012/04/10 13:31:39  fisyak
 * The first version
 *
 * Revision 1.27  2011/04/22 22:00:18  fisyak
 * warn off
 */

#include <stdio.h>
#include <stdexcept>
#include "Sti/StiPlanarShape.h"
#include "Sti/StiCylindricalShape.h"
#include "Sti/StiMaterial.h"
#include "Sti/StiPlacement.h"
#include "Sti/StiDetector.h"
#include "Sti/Base/Factory.h"
#include "Sti/StiToolkit.h"
#include "Sti/StiIsActiveFunctor.h"
#include "Sti/StiNeverActiveFunctor.h"
#include "Sti/StiElossCalculator.h"
#include "StiBTofDetectorBuilder.h" 
#include "StDetectorDbMaker/StiBTofHitErrorCalculator.h"
#include "TDataSetIter.h"
#include "tables/St_HitError_Table.h"
#include "StEvent.h"
#include "StEventTypes.h"
#include "StBTofHit.h"
/// Build all detector components of the BTof detector.
static Int_t _debug = 0;
//________________________________________________________________________________
void StiBTofDetectorBuilder::buildDetectors(StMaker &source) {
  LOG_INFO << "StiBTofDetectorBuilder::buildDetectors() -I- Started" << endm;
  setNRows(StBTofHit::kNModule);
  for (Int_t m = 0; m < StBTofHit::kNModule; m++) 
    setNSectors(m,StBTofHit::kNTray);
  useVMCGeometry(); 
}
//________________________________________________________________________________
void StiBTofDetectorBuilder::useVMCGeometry() {
  LOG_INFO << "StiBTofDetectorBuilder::buildDetectors() -I- Use VMC geometry" 
       << endm;
  SetCurrentDetectorBuilder(this);

  // Build materials. In the BTof detector we have two: Air for the mother volume,
  // silicon for both the detector and the ladder support. This will be updated with
  // more detailed support structures at the appropriate time.
  struct Material_t {
    const Char_t *name;
    StiMaterial    **p;
  };
  Material_t map[] = {
    {"AIR", &_gasMat},
    {"BTOF_RPCG", &_fcMaterial} 
  };
  Int_t M = sizeof(map)/sizeof(Material_t);
  for (Int_t i = 0; i < M; i++)     {
    const TGeoMaterial *mat =  gGeoManager->GetMaterial(map[i].name); 
    if (! mat) continue;
    Double_t PotI = StiVMCToolKit::GetPotI(mat);
    *map[i].p = add(new StiMaterial(mat->GetName(),
				    mat->GetZ(),
				    mat->GetA(),
				    mat->GetDensity(),
				    mat->GetDensity()*mat->GetRadLen(),
				    PotI));
  }
  //
  // Build volumes. Will be done from GEANT tables.
  //

  // Set volume name tree. Inactive volumes only here. Active volumes are declared in ::AverageVolume, called
  // through loop over StiDetectorBuilder::AverageVolume
  const VolumeMap_t BTofVolumes[] =     { 
    //    {"BRMD","Active ladder volume",   "HALL_1/CAVE_1/BTOF_1","",""}
    {"BRSG","the sensitive gas layer in the TOFr module",   "HALL_1/CAVE_1/BTOF_1/BTOH_%d/BSEC_%d/BTRA_1/BXTR_1/BRTC_1/BGMT_1/BRMD_%d/BRDT_1/BRSG_%d",&half,&sector,&module,&gasgap HALL_1/CAVE_1/BTOF_1","",""}
  };
  Int_t NoBTofVols = sizeof(BTofVolumes)/sizeof(VolumeMap_t);
  gGeoManager->RestoreMasterVolume(); 
  gGeoManager->CdTop();
  for (Int_t i = 0; i < NoBTofVols; i++) {
    gGeoManager->RestoreMasterVolume(); 
    gGeoManager->CdTop();
    TString path(BTofVolumes[i].path);
    if (gGeoManager->cd(path))       {
      TGeoNode *nodeT = gGeoManager->GetCurrentNode();
      if (! nodeT) continue;;
      StiVMCToolKit::LoopOverNodes(nodeT, path, BTofVolumes[i].name, MakeAverageVolume);
    } 
    else {LOG_INFO << "StiBTofDetectorBuilder::useVMCGeometry skip node " 
		   << path.Data() << endm;}
  }
}
//________________________________________________________________________________
void StiBTofDetectorBuilder::AverageVolume(TGeoPhysicalNode *nodeP) {
  if (!nodeP)     {
    LOG_ERROR << "StiBTofDetectorBuilder::AverageVolume -E- no TGeoPhysicalNode. "
	     << " Perhaps BTof is turned on in tracking, but not present in simulation. Returning."
	     << endm;
    return;
  }
  TString nameP(nodeP->GetName());
  // CAVE_1/BTOF_1/BTOH_2/BSEC_59/BTRA_1/BXTR_1/BRTC_1/BGMT_1/BRMD_21
  Int_t half, sector, tray, module, gasgap;
  Int_t n = sscanf(nameP.Data(),"HALL_1/CAVE_1/BTOF_1/BTOH_%d/BSEC_%d/BTRA_1/BXTR_1/BRTC_1/BGMT_1/BRMD_%d/BRDT_1/BRSG_%d",&half,&sector,&module,&gasgap);
  assert(n == 4);
  if (gasgap != 3) return;
  
  // Check whether this is an active volume
  Bool_t ActiveVolume = kFALSE;
  if (nodeP->GetVolume()->GetMedium()->GetParam(0) == 1) {
    ActiveVolume = kTRUE;
  }
  
  //Material definitions
  TGeoMaterial *matP   = nodeP->GetVolume()->GetMaterial(); 
  Double_t PotI = StiVMCToolKit::GetPotI(matP);
  static StiMaterial *matS = 0;
  if (! matS) matS = add(new StiMaterial(matP->GetName(),
					 matP->GetZ(),
					 matP->GetA(),
					 matP->GetDensity(),
					 matP->GetDensity()*matP->GetRadLen(),
					 PotI));
  Double_t ionization = matS->getIonization();
  StiElossCalculator *ElossCalculator = new StiElossCalculator(matS->getZOverA(), 
							       ionization*ionization, 
							       matS->getA(), 
							       matS->getZ(),
							       matS->getDensity());
  //Extract volume geometry from TGeoPhysicalNode
  TGeoVolume   *volP   = nodeP->GetVolume();
  TGeoShape    *shapeP = nodeP->GetShape();  
  TGeoBBox     *box    = (TGeoBBox *) shapeP;
  static StiShape  *sh = 0;
  if (sh && 
      (box->GetDZ() != sh->getHalfDepth() ||
       box->GetDX() != sh->getThickness()))     sh = 0;
  }
  if (! sh) sh = new StiPlanarShape(volP->GetName(),          // Name
				    box->GetDZ(),             // halfDepth
				    box->GetDX(),             // thickness
				    StBTofHit::kNCell*StBTofHit::padWidth()/2); // box->GetDY(),         // halfWidth
  add(sh);
  // position information
  TGeoHMatrix  *hmat   = nodeP->GetMatrix();  if (debug()) hmat->Print("");
  Double_t     *xyz    = hmat->GetTranslation();
  Double_t     *rot    = hmat->GetRotationMatrix();
  tray = (StBTofHit::kNTray/2)*(half-1) + sector;
  StThreeVectorD centerVector(xyz[0],xyz[1],xyz[2]);
  StThreeVectorD normalVector(rot[0],rot[3],rot[6]);
  Double_t prod = centerVector*normalVector;
  if (prod < 0) normalVector *= -1;
  Double_t phi  = centerVector.phi();
  Double_t phiD = normalVector.phi();
  Double_t r = centerVector.perp();
  StiPlacement *pPlacement = new StiPlacement;
  pPlacement->setZcenter(centerVector.z());
  pPlacement->setLayerRadius(r); //this is only used for ordering in detector container...
  pPlacement->setLayerAngle(phi); //this is only used for ordering in detector container...
  pPlacement->setRegion(StiPlacement::kMidRapidity);
  pPlacement->setNormalRep(phiD, r*TMath::Cos(phi-phiD), r*TMath::Sin(phi-phiD));
  TString name(nameP);
  name.ReplaceAll("HALL_1/CAVE_1/BTOF_1/","");
  name.ReplaceAll("BTRA_1/BXTR_1/BRTC_1/BGMT_1/","");
  name.ReplaceAll("/BRDT_1/BRSG_3","");
  StiDetector *det =getDetectorFactory()->getInstance();
  det->setName(name.Data());
  det->setIsOn(kTRUE);
#if 1
  if (ActiveVolume) det->setIsActive(new StiIsActiveFunctor);
  else              det->setIsActive(new StiNeverActiveFunctor);
#else
  det->setIsActive(new StiIsActiveFunctor);
#endif
  det->setIsContinuousMedium(false);
  det->setIsDiscreteScatterer(true);
  det->setShape(sh);
  det->setPlacement(pPlacement);
  det->setGas(GetCurrentDetectorBuilder()->getGasMat());
  if(!det->getGas()) LOG_ERROR <<"gas not there!"<<endm;
  det->setMaterial(matS);
  det->setElossCalculator(ElossCalculator);
  det->setHitErrorCalculator(StiBTofHitErrorCalculator::instance());
  // Adding detector, not sure if setKey is necessary  
  //if(ActiveVolume){
  det->setKey(1, module-1);
  det->setKey(2, tray-1);
  add(module-1, tray-1, det);
  if (_debug) {
    LOG_INFO 
      << "===>NEW:BTof:pDetector:Name               = " << det->getName() << endm;
    LOG_INFO
      << " NormalRefAngle    = " << pPlacement->getNormalRefAngle()*TMath::RadToDeg() 
      << " NormalRadius      = " << pPlacement->getNormalRadius()                     
      << " NormalYoffset     = " << pPlacement->getNormalYoffset()    << endm;
    LOG_INFO                
      << " CenterRefAngle    = " << pPlacement->getCenterRefAngle()*TMath::RadToDeg() 
      << " CenterRadius      = " << pPlacement->getCenterRadius()                     
      << " CenterOrientation = " << pPlacement->getCenterOrientation()*TMath::RadToDeg() 
      << " LayerRadius       = " << pPlacement->getLayerRadius()                         
      << " LayerAngle        = " << pPlacement->getLayerAngle()*TMath::RadToDeg()   << endm;
    LOG_INFO                     
      << " Zcenter           = " << pPlacement->getZcenter()                             
      << " Tray               = " << tray                                                 
      << " Active?            = " << det->isActive() << endm;
  }
}
